{"version":3,"sources":["scripts/main.js"],"names":["LIST_URL","DETAILS_URL","request","url","fetch","then","response","ok","Promise","reject","headers","get","includes","json","getPhoneInfo","getPhoneIdList","phonesArr","map","phone","id","idArr","getFirstReceivedDetails","res","showNotification","arr","firstPromise","race","getAllSuccessfulDetails","all","el","type","header","textArr","list","document","body","insertAdjacentHTML","ul","querySelector","listText","getThreeFastestDetails","threeFastest","i","splice","indexOf","push"],"mappings":"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","file":"main.bc7c959e.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst LIST_URL = 'https://mate-academy.github.io/phone-catalogue-static/api/phones.json';\nconst DETAILS_URL = 'https://mate-academy.github.io/phone-catalogue-static/api/phones/';\n\nconst request = (url) => {\n  return fetch(`${url}`)\n    .then(response => {\n      if (!response.ok) {\n        Promise.reject('response is not ok')\n      }\n\n      if (!response.headers.get('content-type').includes('application/json')) {\n        Promise.reject(`content type is not supported`)\n      }\n\n      return response.json();\n    });\n};\n\nconst getPhoneInfo = (url) => {\n  return request(`${DETAILS_URL}${url}.json`);\n};\n\nconst getPhoneIdList = () => {\n  return request(LIST_URL)\n    .then(phonesArr => {\n      return phonesArr.map(phone => {\n        return phone.id;\n      });\n    })\n}\n\n// first recieved promise\n\ngetPhoneIdList()\n  .then(idArr => {\n    return getFirstReceivedDetails(idArr);\n  })\n  .then(res => {\n    return showNotification('first-received', `First Received`, [res.id])})\n\nconst getFirstReceivedDetails = (arr) => {\n  const firstPromise = Promise.race(arr.map(id => getPhoneInfo(id)));\n\n  return firstPromise;\n};\n\n// all successful promises\ngetPhoneIdList()\n  .then(idArr => {\n    return getAllSuccessfulDetails(idArr);\n  })\n  .then(res => showNotification('all-successful', `All Successful`, res));\n\nconst getAllSuccessfulDetails = (arr) => {\n  return Promise.all(arr.map(el => el));\n};\n\nconst showNotification = (type, header, textArr) => {\n  const list = `\n  <div class=\"${type}\">\n    <h3>${header}</h3>\n      <ul></ul>\n  </div> `;\n\n  document.body.insertAdjacentHTML('beforeend', list);\n\n  const ul = document.querySelector('.' + type);\n\n  for (const listText of textArr) {\n    ul.insertAdjacentHTML('beforeend', `\n    <li>${listText}</li>`);\n  }\n};\n\n// get three fastest\ngetPhoneIdList()\n  .then(idArr => getThreeFastestDetails(idArr));\n\nconst getThreeFastestDetails = (arr) => {\n  const threeFastest = [];\n\n  for (let i = 0; i < 3; i++) {\n    const firstPromise = Promise.race(arr.map(id => getPhoneInfo(id)));\n\n    arr.splice(1, arr.indexOf(firstPromise.then(res => res.id)));\n    threeFastest.push(firstPromise);\n  };\n\n  return threeFastest;\n};\n"]}